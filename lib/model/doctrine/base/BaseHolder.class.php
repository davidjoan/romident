<?php

/**
 * BaseHolder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $code
 * @property string $firstname
 * @property string $lastname
 * @property string $gender
 * @property string $company
 * @property string $email
 * @property string $home_phones
 * @property string $office_phones
 * @property string $mobile_phone
 * @property string $fax
 * @property string $description
 * @property string $active
 * @property Doctrine_Collection $Patients
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method string              getCode()          Returns the current record's "code" value
 * @method string              getFirstname()     Returns the current record's "firstname" value
 * @method string              getLastname()      Returns the current record's "lastname" value
 * @method string              getGender()        Returns the current record's "gender" value
 * @method string              getCompany()       Returns the current record's "company" value
 * @method string              getEmail()         Returns the current record's "email" value
 * @method string              getHomePhones()    Returns the current record's "home_phones" value
 * @method string              getOfficePhones()  Returns the current record's "office_phones" value
 * @method string              getMobilePhone()   Returns the current record's "mobile_phone" value
 * @method string              getFax()           Returns the current record's "fax" value
 * @method string              getDescription()   Returns the current record's "description" value
 * @method string              getActive()        Returns the current record's "active" value
 * @method Doctrine_Collection getPatients()      Returns the current record's "Patients" collection
 * @method Holder              setId()            Sets the current record's "id" value
 * @method Holder              setCode()          Sets the current record's "code" value
 * @method Holder              setFirstname()     Sets the current record's "firstname" value
 * @method Holder              setLastname()      Sets the current record's "lastname" value
 * @method Holder              setGender()        Sets the current record's "gender" value
 * @method Holder              setCompany()       Sets the current record's "company" value
 * @method Holder              setEmail()         Sets the current record's "email" value
 * @method Holder              setHomePhones()    Sets the current record's "home_phones" value
 * @method Holder              setOfficePhones()  Sets the current record's "office_phones" value
 * @method Holder              setMobilePhone()   Sets the current record's "mobile_phone" value
 * @method Holder              setFax()           Sets the current record's "fax" value
 * @method Holder              setDescription()   Sets the current record's "description" value
 * @method Holder              setActive()        Sets the current record's "active" value
 * @method Holder              setPatients()      Sets the current record's "Patients" collection
 * 
 * @package    romident
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseHolder extends DoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('t_holder');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('code', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             'notnull' => true,
             ));
        $this->hasColumn('firstname', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('lastname', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('gender', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('company', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => false,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'notnull' => true,
             ));
        $this->hasColumn('home_phones', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'notnull' => false,
             ));
        $this->hasColumn('office_phones', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'notnull' => false,
             ));
        $this->hasColumn('mobile_phone', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'notnull' => false,
             ));
        $this->hasColumn('fax', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             'notnull' => false,
             ));
        $this->hasColumn('description', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             'notnull' => false,
             'default' => '',
             ));
        $this->hasColumn('active', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             'fixed' => 1,
             'notnull' => true,
             'default' => 1,
             ));


        $this->index('i_firstname', array(
             'fields' => 
             array(
              0 => 'firstname',
             ),
             ));
        $this->index('i_lastname', array(
             'fields' => 
             array(
              0 => 'lastname',
             ),
             ));
        $this->index('u_email', array(
             'fields' => 
             array(
              0 => 'email',
             ),
             'type' => 'unique',
             ));
        $this->index('i_active', array(
             'fields' => 
             array(
              0 => 'active',
             ),
             ));
        $this->option('symfony', array(
             'filter' => false,
             'form' => true,
             ));
        $this->option('boolean_columns', array(
             0 => 'active',
             1 => 'gender',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Patient as Patients', array(
             'local' => 'id',
             'foreign' => 'holder_id'));

        $sluggableext0 = new Doctrine_Template_SluggableExt(array(
             'fields' => 
             array(
              0 => 'firstname',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($sluggableext0);
        $this->actAs($timestampable0);
    }
}